#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const socketIO = require('socket.io')
const debug = require('debug')('back-end:server');
const http = require('http');
const config = require('../config')

const ScanInterval = require("../models").scanInterval;


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Init Socket.IO
 */

const initSocketIO = require("../socket")
const {createTask} = require("../services/tasks");

const io = socketIO(server, {
    cors: {
        origin: '*'
    }
})

initSocketIO(io)
config.SOCKET.io = io

/**
 * Listen on provided port, on all network interfaces.
 */

async function start() {
    await config.DATABASE.sequelize.authenticate()
        .then(() => {
            config.DATABASE.sequelize.sync()
        })
        .then(() => {
            server.listen(port)
            server.on('error', onError)
            server.on('listening', onListening)
        })
        .then(() => {
            ScanInterval.findOne({order: ['createdAt']})
                .then(data => {
                    if (data){
                        createTask({interval: data.interval, cryptocurrency: 'bitcoin', io: io})
                    }
                })
        })
        .catch(err => {
            console.error(`Server starting error ${err}`)
        })
}

start()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Server is listening on ' + bind);
}
